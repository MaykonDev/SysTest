#!/bin/python3

"""
A SysTest é uma ferramenta de analise de falhas totalmente automatizada, criada para diminuir o tempo de um Pentesting em um sistema!
"""

def banner():
    print("""
 \033[1;31m 
                                                                       
   _|_|_|                      _|_|_|_|_|                      _|      
 _|        _|    _|    _|_|_|      _|      _|_|      _|_|_|  _|_|_|_|  
   _|_|    _|    _|  _|_|          _|    _|_|_|_|  _|_|        _|      
       _|  _|    _|      _|_|      _|    _|            _|_|    _|      
 _|_|_|      _|_|_|  _|_|_|        _|      _|_|_|  _|_|_|        _|_|  
                 _|                                                    
             _|_|                                                      
 \033[0m   
            """)

try:
    #importando as bibliotecas:
    import os, sys, requests
    import socket
except ImportError() as erro:
    print(erro)

user_param = sys.argv[1]

if user_param == "-h":
    banner()
    print("""
SysTest instruções!

python SysTest -h -- Instruções de uso.
python SysTest -o <site> -- Começar o scaneamento por vulnerabilidades no site digitado. Exemplo: python TestSystem -o https://google.com
python SysTest -i -- Lista de ações realizadas pelo script.
python SysTest -u -- Update para novas versões.
python SysTest -a -- Listagem de informações do script.
    """)

#analise de vulnerabilidades:
elif user_param == "-o":
    user_input_url = sys.argv[2]
    banner()
    #caso o usuario digite o host sem "https"
    #essa parte adiciona o "https" e realiza a dork scanner
    if not "https://" in user_input_url:
        new_url = f"https://{user_input_url}"
        dork = ["/robots.txt", "/php=id?1", "/admin", "/ext: php.mysql_", "/home.php?", "/index.php?", "/main.php"]
        for linha in dork:
            url = f"{new_url}{linha}"
            req = requests.get(url)

            if req.status_code == 200 or req.status_code == 202:
                print(f"{url} - STATUS: ON")
            elif req.status_code == 404:
                print(f"{url} - STATUS: OFF - Bad Requests")
            elif req.status_code == 401:
                print(f"{url} - STATUS: Não autorizada")
            elif req.status_code == 403:
                print(f"{url} - STATUS: Sem permissão de acesso")
            elif req.status_code == 409:
                print(f"{url} - STATUS: Conflito")

        #recebe o ip do host:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s = socket.gethostbyname(f'{user_input_url}')

        print(f"\nIP do host {new_url}: {s}")
        print("\n\n[-] Realizando port scanner... Aguarde!")

        lista = [20, 21, 22, 80, 443, 8080]
        for ports in lista:

            if sock.connect_ex((s, ports)) == 0:
                print(f"Porta {ports} Aberta!")
            else:
                print(f"Porta {ports} Fechada!")
                sock.close()

    else:
        banner()
        #caso o usuario entre com o host ja com o "https"
        dork = ["/robots.txt", "/php=id?1", "/admin"] #lista de dorks
        for linha in dork:
            #realiza a juncao da url digitada com a dork:
            url = f"{user_input_url}{linha}"
            req = requests.get(url)

            if req.status_code == 200 or req.status_code == 202:
                print(f"{url} - STATUS: ON")
            elif req.status_code == 404:
                print(f"{url} - STATUS: OFF - Bad Requests")
            elif req.status_code == 401:
                print(f"{url} - STATUS: Não autorizada")
            elif req.status_code == 403:
                print(f"{url} - STATUS: Sem permissão de acesso")
            elif req.status_code == 409:
                print(f"{url} - STATUD: Conflito")

        socket.gethostbyname(user_input_url)
        print(f"ip do site: {s}")

elif user_param == "-i":
    banner()
    print("""
Ações realizadas pelo script:

1° - Escaneia as portas: {20, 21, 22, 80, 443, 8080}.
2° - Realiza um bruteforce de diretorios no site.
3° - Realiza busca por dorks no site.
4° - Caso haja vulnerabilidade de sqli, a falha sera explorada.
5° - Gera um pdf com os diretorios existentes, vulnerabilidades e as portas abertas e fechadas no site.
    """)

elif user_param == "-u":
    banner()
    #atualizacao da ferramenta:
    print("Atualizando... aguarde!")
    os.system("bash update.sh")

elif user_param == "-a":
    banner()
    print("""
SysTest!

.-Criador: MaykonDev.
.-Versão: 0.1 beta
.-Copyright: ©2022.
.-Responsaveis: Cyber Security Community.

observacao: nao nos responsabilizamos pelos atos cometidos pelos usuarios!
    """)

